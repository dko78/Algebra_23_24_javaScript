let stocks = {
  fruits: ["jabuka", "banana", "jagoda"],
  liquid: ["voda", "led"],
  holder: ["zdjelica", "kornet"],
  topings: ["čokolada"]
};

is_shop_open = false;

let order = (time, work) => {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(() => {
        resolve(work());
      }, time);
    } else {
      reject(console.log("zatvorena radnja!"));
    }
  });
};

order(2000, () => {
  console.log(`${stocks.fruits[1]} je odabran.`);
})
  .then(() => {
    return order(0, () => {
      console.log("počela proizvodnja.");
    });
  })
  .then(() => {
    return order(2000, () => {
      console.log("Počeo rezati voće");
    });
  })
  .then(() => {
    return order(2000, () => {
      console.log("Izrezao voće");
    });
  })
  /*ovaj catch dio ide na reject znači preskače ove .then-ove i ide ovdje*/
  .catch(() => {
    console.log("Kupac otišao - promise rejected");
  })
  .finally(() =>
    console.log("finnaly se izvršava na kon svega i promisa i catch")
  );

/*...............................................ovo je pravi asyn wait                                              */

let stocks = {
  fruits: ["jabuka", "banana", "jagoda"],
  liquid: ["voda", "led"],
  holder: ["zdjelica", "kornet"],
  topings: ["čokolada"]
};

is_shop_open = true;

//new promise
/*
let toppingsChoice = () => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(console.log("Koji premaz kume?"));
    }, 2000);
  });
};
*/
//new promise

function time(ms) {
  return new Promise((resolve, reject) => {
    if (is_shop_open) {
      setTimeout(resolve, ms);
    } else {
      reject(console.log("SHop je zatvoren!."));
    }
  });
}

async function kitchen() {
  try {
    await time(2000);
    console.log(`${stocks.fruits[0]}`);

    await time(0);
    console.log("Počinejm proizvodnju");

    await time(2000);
    console.log("Režem voće");

    await time(1000);
    console.log("Voda i drugo");
    
    
  } catch (error) {
    console.log(error);
  } finally {
    console.log("dan gotov, zarva");
  }
}

kitchen();

//ovo je samo primjer pr1
/* pr1 start
async function kitchen() {
  console.log("A");
  console.log("B");
  console.log("C");
  await toppingsChoice();
  console.log("D");
  console.log("E");
}

kitchen();

console.log("Perem suđe");
console.log("Spremam stolove");
console.log("Spremam suđe");
*/ //pr1 kraj

/*
async function order() {
  try {
    await abc; //points to fake fuction
  } catch (error) {
    console.log("abc ne postoji", error);
  } finally {
    console.log("runs code in finally.");
  }
}

order().then(() => {
  console.log("Opa");
});
*/

//acync wait 3

function fun1(){
  return new Promise ((resolve, reject)=>{
    setTimeout(()=>{
      resolve('Good data')
    }, 100)
  })
};


function fun2(){
  console.log('fun2')
  return new Promise ((resolve, reject)=>{
    setTimeout(()=>{
      reject('OK2')
    }, 100)
  })
};


function onSuccess(data){
  console.log(`Success ${data}`)
};

function onError(errorCode){
  console.error(`Error ${errorCode}`)
};


fun1()
.then (fun2)
.then (onSuccess)
.catch (onError)


